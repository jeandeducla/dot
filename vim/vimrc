"
" "PC Load Letter? What da fuck does that mean?"
"

" - [>] grep
" - [.] tabs appearance
" - [x] ripgrep
" - [>] terminal
" - [.] format


" --------------------- "
" ----- PLUGGINS ------ "
" --------------------- "

call plug#begin('~/.vim/plugged')

Plug 'preservim/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'ycm-core/YouCompleteMe'
" Plug 'sainnhe/edge'
Plug 'neomake/neomake'
Plug 'cespare/vim-toml'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'milkypostman/vim-togglelist'

call plug#end()

" NERDTree
let g:NERDTreeDirArrowExpandable = '►'
let g:NERDTreeDirArrowCollapsible = '▼'
let NERDTreeMinimalUI = 1
let NERDTreeAutoDeleteBuffer = 1
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif " NERDTree opens when executing vim alone

" Neomake
call neomake#configure#automake('w')
let g:neomake_open_list = 2   " always opens quifixlist after building
let g:neomake_warning_sign = {
 \   'text': '!',
 \   'texthl': 'NeomakeWarningSign',
 \ }

" YouCompleteMe
let g:ycm_enable_diagnostic_signs = 0 " deactivates column signs to avoid conflicts with neomake
let g:ycm_auto_hover = ""             " deactivates autohover

" fzf
let g:fzf_layout = { 'window': '10new' }
let g:fzf_colors =
            \ { 'gutter':  ['bg', 'Normal'],
              \ 'bg+':     ['fg', 'CursorLine'],
              \ 'info':    ['bg', 'Statement'] }
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case  --colors "match:fg:red" --colors "path:fg:blue" --colors "line:fg:white"  -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview('right:50%:noborder'), <bang>0)

if executable('rg')
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

" --------------------- "
" ------ OPTIONS ------ "
" --------------------- "

set cursorline           " highlights cursor's line
set hidden               " hides unsaved abandonned modified buffer
set fillchars=vert:┃     " split char
set path+=**             " provides tab-completion for all file-related tasks
set wildmenu             " displays all matching files when we tab complete
set splitbelow           " splits open at the bottom 
set splitright           " splits on the right
set noequalalways        " splits size don't adjust to the same
set hlsearch             " highlights search results and 
set incsearch            " enableds incremental results
set autoindent           " uses indentation of previous line
set smartindent          " smart indention for C like language
set tabstop=4            " tab width is 4 spaces
set shiftwidth=4         " indent with 4 spaces
set expandtab            " expand tab to spaces
set autoread             " automatically reads a file if it has been changed
set completeopt-=preview " removes the preview window
set timeoutlen=400       " most of my mapping are just 2 keys so you can type pretty fast
set laststatus=2         " always displays the status line, even if only one window is displayed


" --------------------- "
" ------ COLORS ------- "
" --------------------- "

set background=dark
colorscheme nnkd

hi CursorLine        cterm=none ctermbg=8     ctermfg=none
hi StatusLine        cterm=bold ctermbg=8 	  ctermfg=white
hi StatusLineNC      cterm=none ctermbg=8 	  ctermfg=0
hi SignColumn        cterm=none ctermbg=none  ctermfg=none
" vertical split color
hi VertSplit         cterm=bold ctermbg=none  ctermfg=8 
" autocomplete results
hi Pmenu             cterm=none ctermbg=8     ctermfg=white 
hi PmenuSel          cterm=none ctermbg=white ctermfg=8
" YouCompleteMe
hi YcmErrorSign      cterm=bold ctermbg=none  ctermfg=red
hi YcmWarningSign    cterm=bold ctermbg=none  ctermfg=yellow
hi YcmWarningSection cterm=none ctermbg=none  ctermfg=none
" Neomake
hi NeomakeWarningSign cterm=bold ctermbg=none ctermfg=yellow
hi NeomakeWarning     cterm=bold ctermbg=none ctermfg=none

" special highlightings
augroup Json
    autocmd!
    autocmd BufNewFile,BufRead *.json* set ft=javascript " json syntax highlight
    autocmd BufNewFile,BufRead *.avsc set ft=javascript  " avro syntax highlight
augroup END


" --------------------- "
" --- CUSTOM FUNCS ---- "
" --------------------- "

" toggles wrap locally and globally
let g:Wrap = &l:wrap
function GetWrap()
    echom g:Wrap
endfunction

function SetLocalWrap()
    if &ft == "nerdtree"
        set nowrap
    else
        let &l:wrap = g:Wrap
    endif
endfunction

function ToggleLocalWrap()
    let g:Wrap = !g:Wrap
    call SetLocalWrap()
endfunction

function ToggleGlobalWrap()
    call ToggleLocalWrap()
    let originalw=winnr() " trick to come back to original window
    windo call SetLocalWrap()
    exec originalw.'wincmd w'
endfunction

augroup Wrap
    autocmd!
    autocmd BufNewFile,BufRead * call SetLocalWrap()
augroup END


" --------------------- "
" --- KEY MAPPINGS ---- "
" --------------------- "

" uses <space> as leader
let g:mapleader = "\<space>"

" window movements
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" quickfix and location lists
" nnoremap <silent> <leader>q :copen<CR>
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]w :lnext<CR>
nnoremap <silent> [w :lprevious<CR>

" tabs
nnoremap <silent> <S-Right> :tabn<CR>
nnoremap <silent> <S-Left> :tabN<CR>
nnoremap <silent> <S-l> :tabn<CR>
nnoremap <silent> <S-h> :tabN<CR>

" global and local wrapping
nnoremap <silent> <leader>w :call ToggleLocalWrap()<CR>
nnoremap <silent> <leader>W :call ToggleGlobalWrap()<CR>

" press <space> <space> to turn off highlighting and clear any message already displayed.
nnoremap <leader><space> :nohlsearch<Bar>:echo<CR>

" NERDTree
nnoremap <silent> <leader>ls :NERDTreeToggle<CR> <C-W>=<CR>

" fugitive
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gl :Gpull<CR>
nnoremap <leader>gp :Gpush<CR>

" YouCompleteMe
nnoremap gd :YcmCompleter GoTo<CR>
nnoremap gf :YcmCompleter GoToReferences<CR>
nnoremap gr :YcmCompleter RefactorRename 
nmap <leader>. <plug>(YCMHover)

" terminal
nnoremap <silent> <C-t> :terminal ++close<CR>
