"
" "PC Load Letter? What da fuck does that mean?"
"

" - [>] grep
" - [.] tabs appearance
" - [>] terminal
" - [.] format
"
" - [.] SYNTAX highlight is bad
" - [.] TRUE COLOR terminal?
" - [.] theme
"
" As of 2022-06-01
" - [.] SYNTAX highlight is bad
" - [.] Ripgrep needs to be back
" - [.] Fuzzy finder?
" - [x] window resizing needs to be back
" - [.] Some coc.vim tuning such as:
"   - [.] Replacing in big projects, opens tabs for every file where there is
"   a replace
" - [.] Pimp fugitive
"   - [x] goback in file history
"   - [x] Gitblame
"   - [.] some nicer shortcuts
" - [.] Use Ripgrep for CtrlP


" - [x] Use Ripgrep for CtrlP
" - [.] fuzzy file finder
" - [.] smaller police
" - [.] better color scheme
" - [.] better fugitive color scheme
" - [x] CtrlP defaults to last visited files
" - [.] switch buffers? maybe just with CtrlP
" - [.] Line Number toggles
" - [.] Git gutter and something to jumpt to next modification in file
" - [.] git diff on file toggle
" - [.] Nerdtree opens to current file
" - [.] nicer coc.vim interface (no rounded borders)
" - [.] coc.vim suggestion
" - [.] coc.vim hover
" - [.] Camel Case jump?
" - [.] git status toggle
" - [.] Ctrl+w= only for buffer that are not git status and Nerdtree
" - [.] indentation level


" --------------------- "
" ----- PLUGGINS ------ "
" --------------------- "

call plug#begin('~/.vim/plugged')

Plug 'preservim/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'cespare/vim-toml'
Plug 'rust-lang/rust.vim'
Plug 'milkypostman/vim-togglelist'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Yggdroot/indentLine'

call plug#end()

" NERDTree
let g:NERDTreeDirArrowExpandable = '►'
let g:NERDTreeDirArrowCollapsible = '▼'
let g:NERDTreeMapOpenVSplit = 'v'
let NERDTreeMinimalUI = 1
let NERDTreeAutoDeleteBuffer = 1
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif " NERDTree opens when executing vim alone


" coc
" <tab> for coc completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


" rust.vim
" rusfmt on save
let g:rustfmt_autosave = 1


" ctrlp
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("h")': ['<c-i>'],
    \ }
let g:ctrlp_cmd = 'CtrlPBuffer'
if executable('rg') 
    let g:ctrlp_user_command = 'rg --files %s'
    " let g:ctrlp_user_cashing = 0
    " let g:ctrlp_user_command = 'rg --files %s'
    " let g:ctrlp_user_command = 'rg --files %s'
endif

" --------------------- "
" ------ OPTIONS ------ "
" --------------------- "

set cursorline           " highlights cursor's line
set hidden               " hides unsaved abandonned modified buffer
set fillchars=vert:┃     " split char
set path+=**             " provides tab-completion for all file-related tasks
set wildmenu             " displays all matching files when we tab complete
set splitbelow           " splits open at the bottom 
set splitright           " splits on the right
set noequalalways        " splits size don't adjust to the same
set hlsearch             " highlights search results and 
set incsearch            " enableds incremental results
set autoindent           " uses indentation of previous line
set smartindent          " smart indention for C like language
set tabstop=4            " tab width is 4 spaces
set shiftwidth=4         " indent with 4 spaces
set expandtab            " expand tab to spaces
set autoread             " automatically reads a file if it has been changed
set completeopt-=preview " removes the preview window
set timeoutlen=400       " most of my mapping are just 2 keys so you can type pretty fast
set laststatus=2         " always dislays the status line, even if only one window is displayed
set cmdheight=1          " comand line height
set updatetime=300       " better for coc experience
set nofoldenable         " disable folding
set foldcolumn=0         " no foldcolumn at all


" to disable foldcolumns
augroup NoFold
    au!
    au WinEnter,WinLeave * set nofen foldcolumn=0
augroup END

" --------------------- "
" ------ COLORS ------- "
" --------------------- "

syntax enable
"for rust.vim
filetype plugin indent on
set background=dark
"colorscheme nnkd

hi CursorLine        cterm=none ctermbg=8     ctermfg=none
hi StatusLine        cterm=bold ctermbg=8 	  ctermfg=white
hi StatusLineNC      cterm=none ctermbg=8 	  ctermfg=0
hi SignColumn        cterm=none ctermbg=none  ctermfg=none
" vertical split color
hi VertSplit         cterm=bold ctermbg=none  ctermfg=8 

" autocomplete results
hi Pmenu             cterm=none ctermbg=8     ctermfg=white 
hi PmenuSel          cterm=none ctermbg=white ctermfg=8

" fugitive diff
hi DiffAdd    cterm=none ctermfg=green ctermbg=none
hi DiffDelete cterm=none ctermfg=red   ctermbg=none
hi DiffChange cterm=none ctermfg=yellow ctermbg=none
hi DiffText   cterm=none ctermfg=green ctermbg=none

" Git Status colors
hi diffAdded   cterm=none ctermfg=40 ctermbg=none 
hi diffRemoved cterm=none ctermfg=196 ctermbg=none
hi diffChanged cterm=none ctermfg=208 ctermbg=none

" coc
hi CocErrorSign        cterm=bold ctermbg=none ctermfg=red
hi CocErrorHighlight   cterm=bold ctermbg=none ctermfg=red

hi CocWarningHighlight cterm=italic ctermbg=none ctermfg=208
hi CocWarningSign      cterm=none   ctermbg=none ctermfg=208
hi CocWarningLine      cterm=italic ctermbg=none ctermfg=208

hi CocHintHighlight cterm=italic ctermbg=none ctermfg=226
hi CocHintSign      cterm=italic ctermbg=none ctermfg=226

hi CocInfoHighlight cterm=none ctermbg=none ctermfg=green

" Tabs
hi TabLineFill cterm=none ctermbg=8    ctermfg=white
hi TabLine     cterm=none ctermbg=8    ctermfg=none
hi TabLineSel  cterm=bold ctermbg=none ctermfg=white

" special highlightings
augroup Json
    autocmd!
    autocmd BufNewFile,BufRead *.json* set ft=javascript " json syntax highlight
    autocmd BufNewFile,BufRead *.avsc set ft=javascript  " avro syntax highlight
augroup END

" special indent for json files
autocmd Filetype json setlocal ts=2 sw=2 expandtab

" --------------------- "
" --- CUSTOM FUNCS ---- "
" --------------------- "

" toggles wrap locally and globally
let g:Wrap = &l:wrap
function GetWrap()
    echom g:Wrap
endfunction

function SetLocalWrap()
    if &ft == "nerdtree"
        set nowrap
    else
        let &l:wrap = g:Wrap
    endif
endfunction

function ToggleLocalWrap()
    let g:Wrap = !g:Wrap
    call SetLocalWrap()
endfunction

function ToggleGlobalWrap()
    call ToggleLocalWrap()
    let originalw=winnr() " trick to come back to original window
    windo call SetLocalWrap()
    exec originalw.'wincmd w'
endfunction

augroup Wrap
    autocmd!
    autocmd BufNewFile,BufRead * call SetLocalWrap()
augroup END


function! ToggleLocalGitStatus()
    try
        exe filter(getwininfo(), "get(v:val['variables'], 'fugitive_status', v:false) != v:false")[0].winnr .. "wincmd c"
    catch /E684/
        Git
    endtry
endfunction

" --------------------- "
" --- KEY MAPPINGS ---- "
" --------------------- "

" uses <space> as leader
let g:mapleader = "\<space>"

" window movements
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" window resizes
nnoremap <C-Left>  <C-w>>
nnoremap <C-Down>  <C-w>-
nnoremap <C-Up>    <C-w>+
nnoremap <C-Right> <C-w><

" quickfix and location lists
" nnoremap <silent> <leader>q :copen<CR>
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> <M-j> :lnext<CR>
nnoremap <silent> <M-k> :lprevious<CR>
" nnoremap <silent> ]w :lnext<CR>
" nnoremap <silent> [w :lprevious<CR>

" tabs
nnoremap <silent> <S-l> :tabn<CR>
nnoremap <silent> <S-h> :tabN<CR>

" global and local wrapping
nnoremap <silent> <leader>w :call ToggleLocalWrap()<CR>
nnoremap <silent> <leader>W :call ToggleGlobalWrap()<CR>

" press <space> <space> to turn off highlighting and clear any message already displayed.
nnoremap <leader><space> :nohlsearch<Bar>:echo<CR>

" NERDTree
nnoremap <silent> <leader>ls :NERDTreeToggle<CR> <C-W>=<CR>

" fugitive
nnoremap <leader>gd :Gvdiffsplit<CR>
nnoremap <silent> <leader>gs :call ToggleLocalGitStatus()<CR>
nnoremap <leader>gst :tabnew<Bar>:call ToggleLocalGitStatus()<CR>
nnoremap <leader>gl :Gpull<CR>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gb :G blame<CR>

" Coc
nmap gd <Plug>(coc-definition)
nmap gy <Plug>(coc-type-definition)
nmap gi <Plug>(coc-implementation)
nmap gr <Plug>(coc-references)
nmap R <Plug>(coc-rename)
nmap ;; <Plug>(coc-diagnostic-prev)
nmap '' <Plug>(coc-diagnostic-next)

" terminal
nnoremap <silent> <C-t> :terminal ++close<CR>

inoremap <C-[> <Esc>:w<Cr>
